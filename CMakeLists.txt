cmake_minimum_required(VERSION 3.20)
project(MGL C CXX)

include(CheckLinkerFlag)
include(CMakeDependentOption)
include("${CMAKE_CURRENT_LIST_DIR}/cmake/mglcpu.cmake")

set(MGL_PLATFORM_DOS OFF)
set(MGL_PLATFORM_LINUX OFF)
set(MGL_PLATFORM_OS2 OFF)
set(MGL_PLATFORM_QNX OFF)
set(MGL_PLATFORM_WINDOWS OFF)
set(MGL_PLATFORM_RTTARGET OFF)
if(CMAKE_SYSTEM_NAME STREQUAL "DOS")
    set(MGL_PLATFORM_DOS ON)
elseif(CMAKE_SYSTEM_NAME STREQUAL "Linux")
    set(MGL_PLATFORM_LINUX ON)
elseif(CMAKE_SYSTEM_NAME MATCHES "OS[/]?2")
    set(MGL_PLATFORM_OS2 ON)
elseif(CMAKE_SYSTEM_NAME STREQUAL "QNX")
    set(MGL_PLATFORM_QNX ON)
elseif(CMAKE_SYSTEM_NAME STREQUAL "Windows")
    set(MGL_PLATFORM_WINDOWS ON)
elseif(CMAKE_SYSTEM_NAME STREQUAL "RtTarget")
    set(MGL_PLATFORM_RTTARGET ON)
else()
    message(FATAL_ERROR "Unknown platform")
endif()

MGL_DetectTargetCPUArchitectures(MGL_CPUS)

check_linker_flag(C "-Wl,--no-undefined" LD_SUPPORTS_NO_UNDEFINED)
function(target_link_option_no_undefined TARGET)
    if(LD_SUPPORTS_NO_UNDEFINED)
        target_link_options(${TARGET} PRIVATE "-Wl,--no-undefined")
    endif()
endfunction()

if(MGL_CPU_X86 OR MGL_CPU_X64)
    add_compile_definitions(-D__INTEL__)
endif()

if(MGL_PLATFORM_DOS)
    add_compile_definitions(-DDOS4GW)
    add_compile_definitions($<$<COMPILE_LANGUAGE:ASM_NASM>:STDCALL_MANGLE>)
    add_compile_definitions($<$<COMPILE_LANGUAGE:ASM_NASM>:-D__FLAT__>)
    set(CMAKE_ASM_NASM_OBJECT_FORMAT "obj")
    enable_language(ASM_NASM)
elseif(MGL_PLATFORM_LINUX)
    add_compile_definitions($<$<COMPILE_LANGUAGE:ASM_NASM>:$<$<BOOL:$<TARGET_PROPERTY:POSITION_INDEPENDENT_CODE>>:-D__PIC__>>)
    add_compile_definitions($<$<COMPILE_LANGUAGE:ASM_NASM>:__LINUX__>)
    if(MGL_CPU_X86)
        add_compile_definitions($<$<COMPILE_LANGUAGE:ASM_NASM>:-D__FLAT__>)
        set(CMAKE_ASM_NASM_OBJECT_FORMAT "elf32")
        enable_language(ASM_NASM)
    elseif(MGL_CPU_X64)
        add_compile_definitions($<$<COMPILE_LANGUAGE:ASM_NASM>:-D__FLAT__>)
        set(CMAKE_ASM_NASM_OBJECT_FORMAT "elf64")
        enable_language(ASM_NASM)
    else()
    endif()
elseif(MGL_PLATFORM_WINDOWS)
    add_compile_definitions($<$<COMPILE_LANGUAGE:ASM_NASM>:STDCALL_MANGLE>)
    add_compile_definitions(-D__WINDOWS__)
    add_compile_definitions(-D__WINDOWS32__)
    add_compile_definitions(-DWIN32)
    if(MGL_CPU_X86)
        set(CMAKE_ASM_NASM_OBJECT_FORMAT "win32")
        enable_language(ASM_NASM)
    elseif(MGL_CPU_X64)
        set(CMAKE_ASM_NASM_OBJECT_FORMAT "win64")
        enable_language(ASM_NASM)
    endif()
    add_definitions(-DUSE_WIN32=1)
elseif(MGL_PLATFORM_OS2)
    add_definitions(-DUSEOS232=1)
endif()

option(MGL_TEST_HARNESS "Build MGL test harness" OFF)
cmake_dependent_option(MGL_AGPTEST_HARNESS "Build MGL test harness" OFF MGL_TEST_HARNESS "OFF")
option(MGL_DEBUG_SDDPMI "Debug sddpmi" OFF)
option(MGL_DEBUG_AGP_DRIVER "Debug AGP driver" OFF)

add_subdirectory(src)
add_subdirectory(examples)
